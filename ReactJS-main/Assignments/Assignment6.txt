1. What is a Microservice?
Microservices is a modular apporach designed to address the need for large-scale application development as a group of loosely connected, autonomous services (microservices) interacting through a network.
In simple words, microservices architecture is a collection of smaller independent units that execute each operation of the application as a separate service. So all of the self-contained services have their own logic & database and perform specific functions as well.
These micro services talk to each other depending upon the use case. There are seperate projects for an application such as UI, backend, database etc.. Hence, this is know as seperation of concern and single responsibilty principle.
Advantages of Microservice:
- Multiple technology Stack
- Each component and microservice module has its own codebase.
- Different teams can work on the different process at the same time
- System deployment for each service will be conducted individually


2. What is Monolith architecture?
Monolithic is a traditional software development approach in which the whole operation of the system is centered as a single, autonomous entity on a single application.
Earlier web apps were built using Monolith architecture.
There are various codes such as code for UI, backend, database in a project and suppose if you want to make a small change in the code you need to compile and deploy the whole project. This is monolith architecture.


3. What is the difference between Monolith and microservice?
1. Monolith is built as one large system and is usually one code-base while microservices architecture is built as small independent module based on bussiness functionality.
2. In monolith it is not easy to scale based on demand on the other hand in microservices it is easy.
3. Monolith has shared database, while in microservices each project has their own database.
4. In monolith large code base makes IDE slow and build time gets increase while for microservices each project is independent and small in size so overall build and development time gets decreased.


4. Why do we need a useEffect Hook?
useEffect hok let's you perform side effects in functional components like data fetching (API) manually changing the DOM or setting up a subscription.
With useEffect hook we can tell react that after every render call the callback function pass as the first parameter to useEffect.
Syntax - useEffect(()=>{
		// code
	   },[])

By default, useEffect runs after every render but we can customize it with the second paramter.As the second parameter, the useEffect accepts an array that allows us to tell react when we want our effect to be called.
If you want to do something after rendering a component the use useEffect hook.


5. What is optional chaining?
eg : const person = {
		name:"Mital",
		address = {
			city:"Delhi"
		}
	}
Here we can access the property city as
console.log(person.address.city)
But suppose if we don't have address property then while accessing address it will give the o/p as undefined and if we try to access city then it will give an error.
To overcome this we use ternary/conditional operator.
eg : console.log(person.address ? person.address.city : undefined)
eg : console.log(person.address && person.address.city)
But here the code is repeated and is not an ideal approach when accessing the properties of deep nested structure. 
Here comes optional chaining that provides an efficient way.
The optional chaining ?. is a safe way to access nested object properties even if an intermediate property doesn't exists.
The optional chaining stops the evaluation if the value before ? is undefined or null and returns undefined.
eg : console.log(person?.address?.city);
If the address property is present then it will display the city else will display undefined rather than throwing an error.


6. What is Shimmer UI?
Shimmer UI shows the actual UI even before rendering so that the users will understand how quickly the web app will load even before the content has shown up.
It gives idea to the users of what's about to come.
Shimmer UI is used to make a better user experience.


7. What is the difference between JS expression and JS statement?
A JS expression returns a value that we use in the application. 
for example: 	4 + 2 // output 6 
			"foo".toUpperCase() // output 'FOO'
			console.log(2) // logs '2'
			isTrue ? true : false // returns us a true or false value based on isTrue value

A JS statement, does not return a value. 
for example:	let x; // variable declaration
			if () { } // if condition
If we want to use JS expression in JSX, we have to wrap in { } and if we want to use JS statement in JSX, we have to wrap in {( )};


8. What is conditional rendering explain with a code example?
In react we can create multiple components and after that render them depending on some conditions or the state of our application.
In other words, based on one/several conditions a component decided which element it returns.
In react conditional rendering works the same way as condition works in javascript.
eg: If user is logged in the display Welcome user else display welcome guest.
4 different approaches:
a] using if-else:
	isLoggedIn = true;
	if(isLoggedIn){
		return <div>Welcome User</div>
	}else{
		return <div>Welcome Guest</div>
	}

b] using element variable:
	isLoggedIn = true;
	if(isLoggedIn){
		message = Welcome User
	}else{
		message = Welcome Guest
	}
	return <div> {message} </div>

c] using ternary operator:
	isLoggedIn = true;
	isLoggedIn? <div>Welcome User</div> : <div>Welcome Guest</div>

d] short circuit operator:
	isLoggedIn = true;
	isLoggedIn && <div>Welcome User</div>


9. What is CORS?
CORS is mechanism that aims to allow requests made on behalf of you and at the same time block requests made by rogue JS and is triggered when making an HTTP request to a different domain, sub-domain, port or protocol. 


10. What is async and await?
Asynchronous functions use async keyword with normal function declaration.
Syntax - 	async function functionName(parameters){
			// code
		}
You can also use it in arrow function
Syntax - 	const functionName = async () => {
			// code
		}
Asynchronous functions always returns promises. It doesn't matter what you return The returned value will always be a promise.
When you call a promise you handle it will .then()
Now a days await is mostly used. await keyword lets you wait for the promise to resolve.
To make sure something happens in a order we use async and await pattern.
eg : 		const getRestaurants = async () => {
        		const data = await fetch("URL");
       		const json = await data.json();
			console.log(json);
    		}


11. What is the use of `const json = await data.json` in getRestaurants() ?
The data object, returned by the 'await fetch()', is a generic placeholder for multiple data formats.
so we can extract the 'JSON object' from a 'fetch' response by using 'await data.json()'.
'data.json()' is a method on the data object that lets you extract a 'JSON object' from the data or response. The method returns a promise because we have used 'await' keyword.
data.json() returns a promise resolved to a JSON object.
